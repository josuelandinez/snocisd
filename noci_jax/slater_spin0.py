# Copyright 2023 NOCI_Jax developers. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

'''
Restricted spin symmetry calculations. 
'''

import numpy as np
from noci_jax import slater, math_helpers

def tvecs_to_rmats(tvecs, nvir, nocc, occ_mat=None):
    '''
    Transform Thouless vectors into rotation matrices.
    Args:
        tvecs: shape (N, nvir, nocc) or (N, nvir*nocc)
    Returns:
        array of size (N, nvir, nocc)
    '''

    vecs_all = tvecs.reshape(-1, nvir, nocc)
    nvecs = vecs_all.shape[0]
    if occ_mat is None:
        occ_mat = np.eye(nocc)
    Imats = np.tile(occ_mat, (nvecs)).T.reshape(nvecs, nocc, nocc) 
    rmats = np.concatenate([Imats, vecs_all], axis=1)
    # rmats = rmats.reshape(-1, nvir+nocc, nocc)
    return rmats


def add_tvec_hf(tmats):
    return slater.add_tvec_hf(tmats)


def metric_rmats(rmat1, rmat2):
    '''
    Evaluate the overlap between the two Slater determinants represented by rotation matrices.
    '''
    mat = rmat1.T.conj() @ rmat2 
    ovlp = np.linalg.det(mat) ** 2
    return ovlp


def orthonormal_mos(tmats):
    return slater.orthonormal_mos(tmats)


def rotate_rmats(rmats, U):
    '''
    Rotate the rmats based on Unitary matrix U.
    args:
        rmats: (nr, norb, nocc) array
        U: (norb, norb) array
    Returns:
        UR for each R
    '''
    return np.einsum('ij, njk -> nik', U, rmats)


def noci_energy(rmats, mo_coeff, h1e, h2e, return_mats=False, lc_coeffs=None, e_nuc=0.0):
    '''
    NOCI energy from the determinants generated by rmats.
    Returns:
        float
    '''

    if return_mats:
        return noci_matrices(rmats, mo_coeff, h1e, h2e)

    if lc_coeffs is not None:
        return noci_energy_lc(rmats, mo_coeff, h1e, h2e, lc_coeffs, e_nuc)

    # first calculate metric and thus overlap
    metrics_all = np.einsum('nji, mjk -> nmik', rmats.conj(), rmats)
    smat = np.linalg.det(metrics_all) ** 2

    # transition density matrices
    inv_metrics = np.linalg.inv(metrics_all)
    sdets = np.einsum("ij, njk -> nik", mo_coeff, rmats)
    trdms = np.einsum("mij, nmjk, nlk -> nmil", sdets, inv_metrics, sdets.conj())

    # transition hamiltonian for RHF
    E1 = np.einsum("ij, nmji -> nm", h1e, trdms) * 2
    J = np.einsum("ijkl, nmlk -> nmij", h2e, trdms)
    E2J = np.einsum("nmij, nmji -> nm", J, trdms) * 2
    K = np.einsum("ijkl, nmjk -> nmil", h2e, trdms)
    E2K = np.einsum("nmij, nmji ->nm", K, trdms)

    E2 = E2J - E2K

    hmat = (E1 + E2) * smat

    energy = solve_lc_coeffs(hmat, smat, return_vec=False)
    return energy + e_nuc


def noci_energy_lc(rmats, mo_coeff, h1e, h2e, lc_coeffs, e_nuc=0.0):
    # first calculate metric and thus overlap
    metrics_all = np.einsum('nji, mjk -> nmik', rmats.conj(), rmats)
    smat = np.linalg.det(metrics_all) ** 2

    # transition density matrices
    sdets = np.einsum("ij, njk -> nik", mo_coeff, rmats)
    trdms = np.einsum("mij, nmjk, nlk -> nmil", sdets, np.linalg.inv(metrics_all), sdets.conj())
    sdets = None
    metrics_all = None
    
    # E1 = np.einsum("")
    # transition hamiltonian for RHF
    E1 = np.einsum("ij, nmji -> nm", h1e, trdms) * 2
    J = np.einsum("ijkl, nmlk -> nmij", h2e, trdms)
    E2J = np.einsum("nmij, nmji -> nm", J, trdms) * 2
    K = np.einsum("ijkl, nmjk -> nmil", h2e, trdms)
    E2K = np.einsum("nmij, nmji ->nm", K, trdms)

    E2 = E2J - E2K

    hmat = (E1 + E2) * smat

    h = lc_coeffs.T.conj().dot(hmat).dot(lc_coeffs)
    s = lc_coeffs.T.conj().dot(smat).dot(lc_coeffs)
    energy = (h / s)

    return energy + e_nuc


def noci_matrices(rmats, mo_coeff, h1e, h2e):
    # first calculate metric and thus overlap
    metrics_all = np.einsum('nji, mjk -> nmik', rmats.conj(), rmats)
    smat = np.linalg.det(metrics_all) ** 2

    # transition density matrices
    inv_metrics = np.linalg.inv(metrics_all)
    sdets = np.einsum("ij, njk -> nik", mo_coeff, rmats)
    trdms = np.einsum("mij, nmjk, nlk -> nmil", sdets, inv_metrics, sdets.conj())

    # transition hamiltonian for RHF
    E1 = np.einsum("ij, nmji -> nm", h1e, trdms) * 2
    J = np.einsum("ijkl, nmlk -> nmij", h2e, trdms)
    E2J = np.einsum("nmij, nmji -> nm", J, trdms) * 2
    K = np.einsum("ijkl, nmjk -> nmil", h2e, trdms)
    E2K = np.einsum("nmij, nmji ->nm", K, trdms)

    E2 = E2J - E2K

    hmat = (E1 + E2) * smat
    
    return hmat, smat


def solve_lc_coeffs(hmat, smat, return_vec=False):
    '''
    Solve the eigenvalue problem Hc = ESc. 
    
    Returns:
        double, ground state energy
        if return_vec:
            1D array, linear combination coefficient
    '''
    energy, c = math_helpers.generalized_eigh(hmat, smat)

    if return_vec:
        return energy, c
    else:
        return energy
    

def make_rdm1(rmats, mo_coeff, lc_coeff):
    '''
    Make rdm1 of NOCI in the AO basis for UHF.
    Return: array of size (2, N, N)
    '''
    # first calculate metric and thus overlap
    metrics_all = np.einsum('nji, mjk -> nmik', rmats.conj(), rmats)
    smat = np.linalg.det(metrics_all) ** 2

    # transition density matrices
    inv_metrics = np.linalg.inv(metrics_all)
    sdets = np.einsum("ij, njk -> nik", mo_coeff, rmats)
    trdms = np.einsum("mij, nmjk, nlk -> nmil", sdets, inv_metrics, sdets.conj())
    trdms = np.einsum("nmij, nm -> nmij", trdms, smat)

    top = np.einsum("n, m, nmij -> ij", lc_coeff.conj(), lc_coeff, trdms) 
    bot = np.einsum("n, m, nm ->", lc_coeff.conj(), lc_coeff, smat)

    return top/bot


def make_rdm12(rmats, mo_coeff, lc_coeff):
    '''
    Make 2RDM given an NOCI.
    Return: (p,q,r,s) = <a^dag_p a_q a^_r a_s>
    order: uuuu, uudd, dduu, dddd

    '''
    metrics_all = np.einsum('nji, mjk -> nmik', rmats.conj(), rmats)
    smat = np.linalg.det(metrics_all) ** 2

    # transition density matrices
    inv_metrics = np.linalg.inv(metrics_all)
    sdets = np.einsum("ij, njk -> nik", mo_coeff, rmats)
    trdms = np.einsum("mij, nmjk, nlk -> nmil", sdets, inv_metrics, sdets.conj())
    dm1s = np.einsum("nmij, nm -> nmij", trdms, smat)
    dm1_u = trdms

    dm2s = np.einsum("nmij, nmkl -> nmijkl", dm1_u, dm1_u) \
             - np.einsum("nmil, nmkj -> nmijkl", dm1_u, dm1_u)
    
    dm2s = np.einsum("nmijkl, nm -> nmijkl", dm2s, smat)

    dm1s = np.einsum("n, m, nmij -> ij", lc_coeff.conj(), lc_coeff, dm1s) 
    dm2s = np.einsum("n, m, nmijkl -> ijkl", lc_coeff.conj(), lc_coeff, dm2s)

    phi_norm = np.einsum("n, m, nm ->", lc_coeff.conj(), lc_coeff, smat)

    return dm1s/phi_norm, dm2s/phi_norm


def get_smat(rmats):
    '''
    Get the overlap matrix of the given determinants.
    '''
    metrics = np.einsum('nji, mjk -> nmik', rmats.conj(), rmats)
    smat = np.linalg.det(metrics) ** 2
    return smat


def expand_hs(hmat0, smat0, rmats_n, rmats_fix, h1e, h2e, mo_coeff):

    '''
    Expand the H matrix and S matrix
    | (fix, fix)   (fix, n)|
    | (n, fix)     (n, n)  |
    (fix, fix) is given by h_n and s_n
    we evaluate (n, fix) and (n, n)  
    '''
    n_fix = len(rmats_fix)
    n_new = len(rmats_n)
    n_tot = n_fix + n_new
    
    hm = np.zeros((n_tot, n_tot))
    sm = np.zeros((n_tot, n_tot))
    hm[:n_fix, :n_fix] = hmat0
    sm[:n_fix, :n_fix] = smat0


    # generate hmat and smat for the lower left block and upper right block
    h_new, s_new = _gen_hsmat(rmats_n, rmats_fix, mo_coeff, h1e, h2e)
    hm[n_fix:, :n_fix] = h_new
    hm[:n_fix, n_fix:] = h_new.T.conj()
    sm[n_fix:, :n_fix] = s_new
    sm[:n_fix, n_fix:] = s_new.T.conj()

    # generate hmat and smat for the lower diagonal block
    h_new, s_new = noci_energy(rmats_n, mo_coeff, h1e, h2e, return_mats=True)
    hm[n_fix:, n_fix:] = h_new
    sm[n_fix:, n_fix:] = s_new

    return hm, sm

def expand_smat(smat_fix, rmats_fix, rmats_new):
    '''
    Given the previous smat from rmats_fix, add the rows and columns from
    rmats_new.
    '''
    n_fix = len(rmats_fix)
    n_new = len(rmats_new)
    n_tot = n_fix + n_new
    metrics_mix = np.einsum('nji, mjk -> nmik', rmats_fix.conj(), rmats_new)
    smat_left = np.linalg.det(metrics_mix) ** 2
    metrics_new = np.einsum('nji, mjk -> nmik', rmats_new.conj(), rmats_new)
    smat_new = np.linalg.det(metrics_new) ** 2

    smat = np.zeros((n_tot, n_tot))
    smat[:n_fix, :n_fix] = smat_fix
    smat[:n_fix, n_fix:] = smat_left
    smat[n_fix:, :n_fix] = smat_left.conj().T
    smat[n_fix:, n_fix:] = smat_new

    return smat
    

def _gen_hsmat(rmats1, rmats2, mo_coeff, h1e, h2e):
    '''
    Return the matrices of the Hamiltonian and overlap matrix with
    respect to two sets of rotation matrices.
    '''

    # first calculate metric and thus overlap
    metrics_all = np.einsum('nji, mjk -> nmik', rmats1.conj(), rmats2)
    smat = np.linalg.det(metrics_all) ** 2

    # transition density matrices
    inv_metrics = np.linalg.inv(metrics_all)
    sdets1 = np.einsum("ij, njk -> nik", mo_coeff, rmats1)
    sdets2 = np.einsum("ij, njk -> nik", mo_coeff, rmats2)
    trdms = np.einsum("mij, nmjk, nlk -> nmil", sdets2, inv_metrics, sdets1.conj())

    # transition hamiltonian for RHF
    E1 = np.einsum("ij, nmji -> nm", h1e, trdms) * 2
    J = np.einsum("ijkl, nmlk -> nmij", h2e, trdms)
    E2J = np.einsum("nmij, nmji -> nm", J, trdms) * 2
    K = np.einsum("ijkl, nmjk -> nmil", h2e, trdms)
    E2K = np.einsum("nmij, nmji ->nm", K, trdms)

    E2 = E2J - E2K
    hmat = (E1 + E2) * smat
   
    return hmat, smat



if __name__ == "__main__":
    print("Main function:\n")
