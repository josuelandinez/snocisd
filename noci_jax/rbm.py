# Copyright 2023 NOCI_Jax developers. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import numpy as np
import itertools
import jax.numpy as jnp
from jax.config import config
config.update("jax_enable_x64", True)

def expand_vecs(params, coeffs):
    '''
    Expand the RBM vectors to all configurations.
    Args:
        params: 2D array, RBM vectors of size (nparam, lparam)
        coeffs: expanded from hiddens
    Returns:
        2D array: expanded Thouless vectors of size (nparam**nhidden, lparam).
    '''
    tvecs = jnp.dot(coeffs, params)
    return tvecs


def add_vec_rbm(param0, tvecs):
    '''
    Given an RBM vector and the list of expanded Thouless vectors,
    return all new Thouless rotations generated by adding param0.
    Returns:
        The new set of vectors added to the old ones.
    NOTE: only for hiddens = [0, 1]
    '''
    tvecs_n = jnp.asarray(tvecs) + param0
    return tvecs_n

def params_to_rmats(vecs, nvir, nocc, coeffs):

    vecs_all = jnp.dot(coeffs, vecs)
    vecs_all = vecs_all.reshape(-1, nvir, nocc)
    nvecs = vecs_all.shape[0]
    I = jnp.eye(nocc)
    Imats = jnp.tile(I, (nvecs)).T.reshape(nvecs, nocc, nocc) # 2 for spins
    rmats = jnp.concatenate([Imats, vecs_all], axis=1)
    rmats = rmats.reshape(-1, 2, nvir+nocc, nocc)
    return rmats




def hiddens_to_coeffs_general(hiddens, nvecs, order=None):
    '''
    Generate all possible combinations of the nvecs of hidden variables.
    Args:
        nvecs: number of RBM vectors
        hiddens: values of hidden variables
    Returns:
        2D array.
    '''
    coeffs = []
    for iter in itertools.product(hiddens, repeat=nvecs):
        sum_coeff = np.asarray(iter)
        coeffs.append(sum_coeff)
      
    coeffs = np.array(coeffs)
    return coeffs

def hiddens_to_coeffs(hiddens, nvecs, order=None):

    if order is None:
        order = nvecs

    import scipy 
    truc = 0
    for i in range(order+1):
        truc += scipy.special.comb(nvecs, i)
    truc = int(truc)
    mat = np.array(np.indices(nvecs * (2,))).reshape(nvecs, -1)
    res = mat[:, np.argsort(mat.sum(0)[::-1], kind='mergesort')].T[::-1]

    return res[:truc]