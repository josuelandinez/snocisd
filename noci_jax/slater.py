# Copyright 2023 NOCI_Jax developers. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import jax.numpy as jnp
from jax.config import config
config.update("jax_enable_x64", True)


def tvecs_to_rmats(tvecs, nvir, nocc, occ_mat=None):
    '''
    Transform Thouless vectors into rotation matrices.
    '''

    vecs_all = tvecs.reshape(-1, nvir, nocc)
    nvecs = vecs_all.shape[0]
    if occ_mat is None:
        occ_mat = jnp.eye(nocc)
    Imats = jnp.tile(occ_mat, (nvecs)).T.reshape(nvecs, nocc, nocc) # 2 for spins
    rmats = jnp.concatenate([Imats, vecs_all], axis=1)
    rmats = rmats.reshape(-1, 2, nvir+nocc, nocc)
    return rmats

def metric_rmats(rmat1, rmat2):
    '''
    Evaluate the overlap between the two Slater determinants represented by rotation matrices.
    '''
    mat = jnp.einsum('sji, sjk -> sik', rmat1.conj(), rmat2)
    ovlp = jnp.prod(jnp.linalg.det(mat), axis=-1)

    return ovlp


def ortho_dets():
    '''
    Orthogonalize the non-orthogonal determinants.
    '''
    pass

def noci_energy(rmats, mo_coeff, h1e, h2e, return_mats=False, lc_coeffs=None, e_nuc=0.0):
    '''
    NOCI energy from the determinants generated by rmats.
    Returns:
        float
    '''

    # first calculate metric and thus overlap
    metrics_all = jnp.einsum('nsji, msjk -> nmsik', rmats.conj(), rmats)
    smat = jnp.prod(jnp.linalg.det(metrics_all), axis=-1)

    # transition density matrices
    inv_metrics = jnp.linalg.inv(metrics_all)
    sdets = jnp.einsum("sij, nsjk -> nsik", mo_coeff, rmats)
    trdms = jnp.einsum("msij, nmsjk, nslk -> nmsil", sdets, inv_metrics, sdets.conj())

    # transition hamiltonian
    E1 = jnp.einsum("ij, nmsji -> nm", h1e, trdms)
    J = jnp.einsum("ijkl, nmslk -> nmij", h2e, trdms)
    E2J = jnp.einsum("nmij, nmsji -> nm", J, trdms)
    K = jnp.einsum("ijkl, nmsjk -> nmsil", h2e, trdms)
    E2K = jnp.einsum("nmsij, nmsji ->nm", K, trdms)

    E2 = E2J - E2K

    hmat = (E1 + 0.5*E2) * smat
    if return_mats:
        return hmat, smat
    else:
        if lc_coeffs is None:
            energy = solve_lc_coeffs(hmat, smat, return_vec=False)
        else:
            h = lc_coeffs.T.conj().dot(hmat).dot(lc_coeffs)
            s = lc_coeffs.T.conj().dot(smat).dot(lc_coeffs)
            energy = h / s
            
        return energy + e_nuc


def solve_lc_coeffs(hmat, smat, return_vec=False):
    '''
    Solve the eigenvalue problem Hc = ESc. 
    
    Returns:
        double, ground state energy
        if return_vec:
            1D array, linear combination coefficient
    '''
    energy, c = _generalized_eigh(hmat, smat)

    if return_vec:
        return energy, c
    else:
        return energy
    

def make_rdm1(rmats, mo_coeff, lc_coeff):
    '''
    Make rdm1 of NOCI in the AO basis for UHF.
    Return: array of size (2, N, N)
    '''
    # first calculate metric and thus overlap
    metrics_all = jnp.einsum('nsji, msjk -> nmsik', rmats.conj(), rmats)
    smat = jnp.prod(jnp.linalg.det(metrics_all), axis=-1)

    # transition density matrices
    inv_metrics = jnp.linalg.inv(metrics_all)
    sdets = jnp.einsum("sij, nsjk -> nsik", mo_coeff, rmats)
    trdms = jnp.einsum("msij, nmsjk, nslk -> nmsil", sdets, inv_metrics, sdets.conj())
    trdms = jnp.einsum("nmsij, nm -> nmsij", trdms, smat)

    top = jnp.einsum("n, m, nmsij -> sij", lc_coeff.conj(), lc_coeff, trdms) 
    bot = jnp.einsum("n, m, nm ->", lc_coeff.conj(), lc_coeff, smat)

    return top/bot


def make_rdm12(rmats, mo_coeff, lc_coeff):
    '''
    Make 2RDM given an NOCI.
    Return: (p,q,r,s) = <a^dag_p a_q a^_r a_s>
    order: uuuu, uudd, dduu, dddd

    '''
    metrics_all = jnp.einsum('nsji, msjk -> nmsik', rmats.conj(), rmats)
    smat = jnp.prod(jnp.linalg.det(metrics_all), axis=-1)

    # transition density matrices
    inv_metrics = jnp.linalg.inv(metrics_all)
    sdets = jnp.einsum("sij, nsjk -> nsik", mo_coeff, rmats)
    trdms = jnp.einsum("msij, nmsjk, nslk -> nmsil", sdets, inv_metrics, sdets.conj())
    dm1s = jnp.einsum("nmsij, nm -> nmsij", trdms, smat)
    dm1_u = trdms[:, :, 0]
    dm1_d = trdms[:, :, 1]
    dm2s_uu = jnp.einsum("nmij, nmkl -> nmijkl", dm1_u, dm1_u) \
             - jnp.einsum("nmil, nmkj -> nmijkl", dm1_u, dm1_u)
    dm2s_dd = jnp.einsum("nmij, nmkl -> nmijkl", dm1_d, dm1_d) \
             - jnp.einsum("nmil, nmkj -> nmijkl", dm1_d, dm1_d)
    dm2s_ud = jnp.einsum("nmij, nmkl -> nmijkl", dm1_u, dm1_d)
    dm2s_du = jnp.einsum("nmij, nmkl -> nmijkl", dm1_d, dm1_u)

    dm2s = jnp.array([dm2s_uu, dm2s_ud, dm2s_du, dm2s_dd])
    dm2s = jnp.einsum("snmijkl, nm -> snmijkl", dm2s, smat)

    dm1s = jnp.einsum("n, m, nmsij -> sij", lc_coeff.conj(), lc_coeff, dm1s) 
    dm2s = jnp.einsum("n, m, snmijkl -> sijkl", lc_coeff.conj(), lc_coeff, dm2s)


    phi_norm = jnp.einsum("n, m, nm ->", lc_coeff.conj(), lc_coeff, smat)

    return dm1s/phi_norm, dm2s/phi_norm


def expand_hs(hmat0, smat0, rmats_n, rmats_fix, h1e, h2e, mo_coeff):
    '''
    Expand the H matrix and S matrix
    | (fix, fix)   (fix, n)|
    | (n, fix)     (n, n)  |
    (fix, fix) is given by h_n and s_n
    we evaluate (n, fix) and (n, n)  
    '''
    n_fix = len(rmats_fix)
    n_new = len(rmats_n)
    n_tot = n_fix + n_new
    
    hm = jnp.zeros((n_tot, n_tot))
    sm = jnp.zeros((n_tot, n_tot))
    hm = hm.at[:n_fix, :n_fix].set(hmat0)
    sm = sm.at[:n_fix, :n_fix].set(smat0)

    # generate hmat and smat for the lower left block and upper right block
    h_new, s_new = _gen_hsmat(rmats_n, rmats_fix, mo_coeff, h1e, h2e)
    hm = hm.at[n_fix:, :n_fix].set(h_new)
    hm = hm.at[:n_fix, n_fix:].set(h_new.T.conj())
    sm = sm.at[n_fix:, :n_fix].set(s_new)
    sm = sm.at[:n_fix, n_fix:].set(s_new.T.conj())

    # generate hmat and smat for the lower diagonal block
    h_new, s_new = noci_energy(rmats_n, mo_coeff, h1e, h2e, return_mats=True)
    hm = hm.at[n_fix:, n_fix:].set(h_new)
    sm = sm.at[n_fix:, n_fix:].set(s_new)

    return hm, sm


def _gen_hsmat(rmats1, rmats2, mo_coeff, h1e, h2e):
    '''
    Return the matrices of the Hamiltonian and overlap matrix with
    respect to two sets of rotation matrices.
    '''

    # first calculate metric and thus overlap
    metrics_all = jnp.einsum('nsji, msjk -> nmsik', rmats1.conj(), rmats2)
    smat = jnp.prod(jnp.linalg.det(metrics_all), axis=-1)

    # transition density matrices
    inv_metrics = jnp.linalg.inv(metrics_all)
    sdets1 = jnp.einsum("sij, nsjk -> nsik", mo_coeff, rmats1)
    sdets2 = jnp.einsum("sij, nsjk -> nsik", mo_coeff, rmats2)
    trdms = jnp.einsum("msij, nmsjk, nslk -> nmsil", sdets2, inv_metrics, sdets1.conj())

    # transition hamiltonian
    E1 = jnp.einsum("ij, nmsji -> nm", h1e, trdms)
    J = jnp.einsum("ijkl, nmslk -> nmij", h2e, trdms)
    E2J = jnp.einsum("nmij, nmsji -> nm", J, trdms)
    K = jnp.einsum("ijkl, nmsjk -> nmsil", h2e, trdms)
    E2K = jnp.einsum("nmsij, nmsji ->nm", K, trdms)

    E2 = E2J - E2K
    hmat = (E1 + 0.5*E2) * smat
   
    return hmat, smat


def _generalized_eigh(A, B):
    L = jnp.linalg.cholesky(B)
    L_inv = jnp.linalg.inv(L)
    A_redo = L_inv.dot(A).dot(L_inv.T)
    e, v = jnp.linalg.eigh(A_redo)
    e0 = e[0]
    v0 = v[:, 0]
    c0 = L_inv.T.dot(v0) # rotate back 

    return e0, c0

if __name__ == "__main__":
    print("Main function:\n")
